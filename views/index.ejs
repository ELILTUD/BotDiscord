<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vue des Messages</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: linear-gradient(45deg, #78b1f3, #4264af);
            color: white;
        }
        .message {
            position: relative;
            width: 100vw;
            height: 100vh; /* Changed from 100% to 100vh */
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: flex-start;
            padding: 2vh;
            box-sizing: border-box;
        }
        .message-header {
            display: flex;
            flex-direction: column;
            align-items: center;
            z-index: 2;
            padding: 2vh;
        }
        .avatar {
            width: 4vw;
            height: 4vw;
            aspect-ratio: 1;
            border-radius: 50%;
            margin-bottom: 1vh;
            border: 0.5vh solid #00ff00;
            box-shadow: 0 0 10px #00ff00;
            z-index: 2;
        }
        .username {
            font-family: 'Comic Sans MS', cursive, sans-serif;
            font-size: 5vh;
            color: white;
            text-shadow: 0 0 1vw #00ff00, 0 0 2vw #00ff00;
        }

        .content {
            width: 100%;
        }
        .content p {
            z-index: 2;
            width: 100%;
            text-align: center;

            margin-top: auto;
            margin-bottom: 2vh;
            
            font-size: 8vw;
            font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;
            color: black;
            -webkit-text-stroke: 0.15em black;
            -webkit-text-fill-color: white;
            paint-order: stroke fill;
            word-break: break-word;
        }

        .attachment {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: contain;
            z-index: 1;
        }
    </style>
</head>
<body>
    <div id="messages"></div>
</body>
<script>
    const channelId = "<%= channelId %>";
    const socket = new WebSocket(`ws://${window.location.hostname}:3000?channelId=${channelId}`);
    const messagesContainer = document.getElementById('messages');

    socket.addEventListener('message', (event) => {
        const messageData = JSON.parse(event.data);

        const messageElement = document.createElement('div');
        messageElement.className = 'message';

        const attachmentsHTML = messageData.attachments
            .map((attachment) => {
                if (attachment.type.startsWith('image/')) {
                    return `<img class="attachment" src="${attachment.url}" alt="Image" />`;
                } else if (attachment.type.startsWith('video/')) {
                    return `<video class="attachment" src="${attachment.url}" controls autoplay></video>`;
                }
                return '';
            })
            .join('');

        messageElement.innerHTML = `
            ${messageData.username ? `
            <div class="message-header">
                <img class="avatar" src="${messageData.avatar}" alt="${messageData.username}" />
                <strong class="username">${messageData.username}</strong>
            </div>` : `
            <div class="message-header">
            </div>`}
            <div class="content">
                <p data-content="${messageData.content}">${messageData.content}</p>
            </div>
            ${attachmentsHTML}
        `;

        messagesContainer.innerHTML = '';
        messagesContainer.appendChild(messageElement);

        setTimeout(() => {
            messagesContainer.innerHTML = '';
        }, 10_000);
    });

    socket.addEventListener('open', () => {
        console.log('Connexion WebSocket établie.');
    });

    socket.addEventListener('close', () => {
        console.log('Connexion WebSocket fermée.');
    });
</script>
</html>
