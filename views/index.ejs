<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>rawchat</title>
    <link rel="stylesheet" href="/styles.css">
</head>

<body>
    <div id="messages"></div>
</body>
<script>
    const channelId = "<%= channelId %>";
    const socket = new WebSocket(`ws://${window.location.hostname}:3000?channelId=${channelId}`);
    const messagesContainer = document.getElementById('messages');

    socket.addEventListener('message', (event) => {
        const messageData = JSON.parse(event.data);

        const messageElement = document.createElement('div');
        messageElement.className = 'message';

        const attachmentsHTML = messageData.attachments
            .map((attachment) => {
                if (attachment.type.startsWith('image/')) {
                    return `<img class="attachment" src="${attachment.url}" alt="Image" />`;
                } else if (attachment.type.startsWith('video/')) {
                    return `<video class="attachment" src="${attachment.url}" style="display:none;" autoplay playsinline style="pointer-events: none;"></video>`;
                }
                return '';
            })
            .join('');

        messageElement.innerHTML = `
            ${messageData.username ? `
            <div class="message-header">
                <img class="avatar" src="${messageData.avatar}" alt="${messageData.username}" />
                <strong class="username">${messageData.username}</strong>
            </div>` : `
            <div class="message-header">
            </div>`}
            <div class="content">
                <p data-content="${messageData.content}">${messageData.content}</p>
            </div>
            ${attachmentsHTML}
        `;

        // Add this new code after creating the message element
        const paragraph = messageElement.querySelector('.content p');
        if (paragraph) {
            // Set custom property based on content length
            paragraph.style.setProperty('--char-length', messageData.content.length);
        }

        if (messageElement.querySelector('video')) {
            const videoElement = messageElement.querySelector('video');
            videoElement.addEventListener('canplay', () => {
                videoElement.style.display = 'block';
            });
        }

        messagesContainer.innerHTML = '';
        messagesContainer.appendChild(messageElement);

        // if the message contains a video, empty the messages container after it has been played
        if (messageElement.querySelector('video')) {
            const videoElement = messageElement.querySelector('video');
            videoElement.addEventListener('ended', () => {
                messagesContainer.innerHTML = '';
            });
        } else {
            // if the message does not contain a video, empty the messages container after 5 seconds
            setTimeout(() => {
                messagesContainer.innerHTML = '';
            }, 10_000);
        }


    });

    socket.addEventListener('open', () => {
        console.log('Connexion WebSocket établie.');
    });

    socket.addEventListener('close', () => {
        console.log('Connexion WebSocket fermée.');
    });
</script>

</html>